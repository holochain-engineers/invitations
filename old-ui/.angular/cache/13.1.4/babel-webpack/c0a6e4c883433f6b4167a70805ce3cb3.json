{"ast":null,"code":"import _asyncToGenerator from \"/Users/futorine/dev/holochain/holochain-engineers/team-mates/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '@environment';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { pluck, map } from 'rxjs/operators';\nimport { ProfileService } from '../services/profile.service';\nimport * as i0 from \"@angular/core\";\nexport class ProfileStore extends ComponentStore {\n  constructor(injector) {\n    super({\n      agentProfiles: []\n    });\n    this.injector = injector;\n    this._cell = environment.cell1;\n    /* updaters */\n    //readonly setMyProfile = this.updater(\n    //  (state, myprofile: AgentProfile | undefined) => ({ ...state, myprofile })\n    //);\n\n    this.addProfile = this.updater((state, agentprofile) => ({\n      agentProfiles: [...state.agentProfiles, agentprofile]\n    }));\n    this.setProfile = this.updater((state, agentprofile) => ({\n      agentProfiles: [...state.agentProfiles.filter(entry => {\n        return entry.agentPubKey !== agentprofile.agentPubKey; //? undefined : entry\n      }), agentprofile]\n    }));\n    this.loadProfiles = this.updater((state, profiles) => Object.assign(Object.assign({}, state), {\n      agentProfiles: profiles || []\n    }));\n    this._profileService = new ProfileService(injector, this._cell); //_profileService.subscribe_to_cell(\"profile_invitation\")\n\n    this.mypubkey = this._profileService.getMyAgentkey();\n  }\n  /* selectors */\n\n\n  selectAgentProfile(hash) {\n    return this.select(state => state.agentProfiles.find(i => i.agentPubKey === hash));\n  }\n\n  selectAgentProfiles(hasharr) {\n    return this.select(state => state.agentProfiles.filter(ap => {\n      hasharr.includes(ap.agentPubKey);\n    }));\n  }\n\n  selectAllProfiles() {\n    return this.select(({\n      agentProfiles\n    }) => agentProfiles);\n  }\n\n  selectProfiles() {\n    return this.select(({\n      agentProfiles\n    }) => agentProfiles).pipe(map(agentprofiles => agentprofiles.map(ap => {\n      return ap.profile;\n    })));\n  }\n\n  selectKeyNickArray() {\n    return this.selectAllProfiles().pipe(map(agentprofiles => agentprofiles.map(ap => {\n      var _a;\n\n      return {\n        agent_pub_key: ap.agentPubKey,\n        nickname: (_a = ap.profile) === null || _a === void 0 ? void 0 : _a.nickname\n      };\n    })));\n  }\n\n  selectKeyNickIndexes() {\n    return this.selectAllProfiles().pipe(map(agentprofiles => agentprofiles.map(ap => {\n      return {\n        [ap.agentPubKey]: ap.profile.nickname\n      };\n    })));\n  }\n\n  getMyProfile() {\n    console.log(\"agentkey\", this.mypubkey);\n    return this.selectAgentProfile(this.mypubkey).pipe(pluck('profile'));\n  }\n\n  getNetStatus() {\n    return this._profileService.getNetworkStatus();\n  } //TODO below functions should be effects because they write to the store following a network call\n\n\n  loadProfileEntries() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      //in the future we might not want to load all the profiles.. and use the search facility instead\n      const profiles = yield _this._profileService.getAllProfiles();\n\n      _this.loadProfiles(profiles);\n\n      console.debug(\"all profiles:\", profiles);\n    })();\n  }\n\n  createMyProfile(myprofile) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      console.debug(\"create profile:\", myprofile);\n      const agentprofile = yield _this2._profileService.createProfile(myprofile);\n\n      _this2.setProfile(agentprofile);\n\n      console.log(\"created profile:\", agentprofile);\n    })();\n  }\n\n  updateMyProfile(newprofile) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      console.debug(\"update profile:\", newprofile);\n      const agentprofile = yield _this3._profileService.updateProfile(newprofile);\n\n      _this3.setProfile(agentprofile);\n\n      console.log(\"updated profile:\", agentprofile);\n    })();\n  }\n\n}\n\nProfileStore.ɵfac = function ProfileStore_Factory(t) {\n  return new (t || ProfileStore)(i0.ɵɵinject(i0.Injector));\n};\n\nProfileStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileStore,\n  factory: ProfileStore.ɵfac\n});","map":{"version":3,"sources":["/Users/futorine/dev/holochain/holochain-engineers/team-mates/ui/src/app/store/profile.store.ts"],"names":["environment","ComponentStore","pluck","map","ProfileService","i0","ProfileStore","constructor","injector","agentProfiles","_cell","cell1","addProfile","updater","state","agentprofile","setProfile","filter","entry","agentPubKey","loadProfiles","profiles","Object","assign","_profileService","mypubkey","getMyAgentkey","selectAgentProfile","hash","select","find","i","selectAgentProfiles","hasharr","ap","includes","selectAllProfiles","selectProfiles","pipe","agentprofiles","profile","selectKeyNickArray","_a","agent_pub_key","nickname","selectKeyNickIndexes","getMyProfile","console","log","getNetStatus","getNetworkStatus","loadProfileEntries","getAllProfiles","debug","createMyProfile","myprofile","createProfile","updateMyProfile","newprofile","updateProfile","ɵfac","ProfileStore_Factory","t","ɵɵinject","Injector","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { environment } from '@environment';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { pluck, map } from 'rxjs/operators';\nimport { ProfileService } from '../services/profile.service';\nimport * as i0 from \"@angular/core\";\nexport class ProfileStore extends ComponentStore {\n    constructor(injector) {\n        super({ agentProfiles: [] });\n        this.injector = injector;\n        this._cell = environment.cell1;\n        /* updaters */\n        //readonly setMyProfile = this.updater(\n        //  (state, myprofile: AgentProfile | undefined) => ({ ...state, myprofile })\n        //);\n        this.addProfile = this.updater((state, agentprofile) => ({\n            agentProfiles: [...state.agentProfiles, agentprofile],\n        }));\n        this.setProfile = this.updater((state, agentprofile) => ({\n            agentProfiles: [...state.agentProfiles.filter((entry) => {\n                    return entry.agentPubKey !== agentprofile.agentPubKey; //? undefined : entry\n                }), agentprofile]\n        }));\n        this.loadProfiles = this.updater((state, profiles) => (Object.assign(Object.assign({}, state), { agentProfiles: profiles || [] })));\n        this._profileService = new ProfileService(injector, this._cell);\n        //_profileService.subscribe_to_cell(\"profile_invitation\")\n        this.mypubkey = this._profileService.getMyAgentkey();\n    }\n    /* selectors */\n    selectAgentProfile(hash) {\n        return this.select((state) => state.agentProfiles.find(i => i.agentPubKey === hash));\n    }\n    selectAgentProfiles(hasharr) {\n        return this.select((state) => state.agentProfiles.filter(ap => { hasharr.includes(ap.agentPubKey); }));\n    }\n    selectAllProfiles() {\n        return this.select(({ agentProfiles }) => agentProfiles);\n    }\n    selectProfiles() {\n        return this.select(({ agentProfiles }) => agentProfiles).pipe(map((agentprofiles) => agentprofiles.map(ap => {\n            return ap.profile;\n        })));\n    }\n    selectKeyNickArray() {\n        return this.selectAllProfiles().pipe(map((agentprofiles) => agentprofiles.map(ap => {\n            var _a;\n            return { agent_pub_key: ap.agentPubKey, nickname: (_a = ap.profile) === null || _a === void 0 ? void 0 : _a.nickname };\n        })));\n    }\n    selectKeyNickIndexes() {\n        return this.selectAllProfiles().pipe(map((agentprofiles) => agentprofiles.map(ap => {\n            return { [ap.agentPubKey]: ap.profile.nickname };\n        })));\n    }\n    getMyProfile() {\n        console.log(\"agentkey\", this.mypubkey);\n        return this.selectAgentProfile(this.mypubkey).pipe(pluck('profile'));\n    }\n    getNetStatus() {\n        return this._profileService.getNetworkStatus();\n    }\n    //TODO below functions should be effects because they write to the store following a network call\n    async loadProfileEntries() {\n        //in the future we might not want to load all the profiles.. and use the search facility instead\n        const profiles = await this._profileService.getAllProfiles();\n        this.loadProfiles(profiles);\n        console.debug(\"all profiles:\", profiles);\n    }\n    async createMyProfile(myprofile) {\n        console.debug(\"create profile:\", myprofile);\n        const agentprofile = await this._profileService.createProfile(myprofile);\n        this.setProfile(agentprofile);\n        console.log(\"created profile:\", agentprofile);\n    }\n    async updateMyProfile(newprofile) {\n        console.debug(\"update profile:\", newprofile);\n        const agentprofile = await this._profileService.updateProfile(newprofile);\n        this.setProfile(agentprofile);\n        console.log(\"updated profile:\", agentprofile);\n    }\n}\nProfileStore.ɵfac = function ProfileStore_Factory(t) { return new (t || ProfileStore)(i0.ɵɵinject(i0.Injector)); };\nProfileStore.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProfileStore, factory: ProfileStore.ɵfac });\n"]},"metadata":{},"sourceType":"module"}