{"ast":null,"code":"import _asyncToGenerator from \"/Users/futorine/dev/holochain/holochain-engineers/team-mates/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from '@environment';\nimport { AppWebsocket } from '@holochain/client';\nimport { serializeHash } from \"../helpers/utils\";\nimport * as i0 from \"@angular/core\";\nexport var ConnectionState;\n\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"OPEN\"] = 0] = \"OPEN\";\n  ConnectionState[ConnectionState[\"CLOSED\"] = 1] = \"CLOSED\";\n  ConnectionState[ConnectionState[\"CLOSING\"] = 2] = \"CLOSING\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 3] = \"CONNECTING\";\n})(ConnectionState || (ConnectionState = {})); //tsconfig: \"allowSyntheticDefaultImports\": true,\n\n\nexport class HolochainService {\n  constructor() {\n    this.signalCallbacks = [];\n  }\n\n  get_pub_key_from_cell(cell) {\n    for (let installedcell of this.cellData) {\n      if (installedcell.role_id == cell) return serializeHash(installedcell.cell_id[1]);\n    }\n\n    ;\n    return undefined;\n  }\n\n  getCellId(cell) {\n    for (let installedcell of this.cellData) {\n      if (installedcell.role_id == cell) return installedcell.cell_id;\n    }\n\n    ;\n    return undefined;\n  }\n\n  init() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      sessionStorage.clear();\n\n      if (!environment.mock) {\n        try {\n          console.log(\"Connecting to holochain\");\n          _this.appWS = yield AppWebsocket.connect(environment.HOST_URL, 1500, s => _this.signalHandler(s));\n          const appInfo = yield _this.appWS.appInfo({\n            installed_app_id: environment.APP_ID\n          });\n          _this.cellData = appInfo.cell_data;\n          console.log(\"Connected to holochain\", appInfo.cell_data);\n          sessionStorage.setItem(\"status\", \"HOLOCHAIN\");\n        } catch (error) {\n          sessionStorage.setItem(\"status\", \"mock\");\n          console.error(error); //throw(error)\n        }\n      } else {\n        console.log(\"you are in Mock mode.. no connections made!\");\n      }\n    })();\n  }\n\n  call(cell, zome, fn_Name, payload, timeout = 15000) {\n    const cellId = this.getCellId(cell);\n    if (!cellId) throw new Error(\"cell not found:\" + cell);\n    return this.appWS.callZome({\n      cap_secret: null,\n      cell_id: cellId,\n      zome_name: zome,\n      fn_name: fn_Name,\n      payload: payload,\n      provenance: cellId[1]\n    }, timeout);\n  }\n  /* in the future 'zome_name' and 'cell_name' should be meta-data of AppSignal and Not part of the payload*/\n\n\n  signalHandler(signal) {\n    if (this.signalCallbacks.length > 0) {\n      for (const cb of this.signalCallbacks) {\n        console.log(\"cb data: \", cb);\n\n        if (cb.cell_name == signal.data.payload.cell && cb.zome_name == signal.data.payload.zome) {\n          console.log(\"signal callback found, executing cb function: \");\n          cb.cb_fn(signal.data.payload);\n          return;\n        }\n      }\n\n      console.log(\"Signal handler for signal was not found\", signal);\n    }\n  }\n\n  registerCallback(cell_name, zome_name, handler) {\n    this.signalCallbacks.push({\n      cell_name: cell_name,\n      zome_name: zome_name,\n      cb_fn: handler\n    });\n  } //TODO add event listener and relay state change back to UI\n\n\n  getConnectionState() {\n    if (this.appWS) return ConnectionState[this.appWS.client.socket.readyState];else return ConnectionState[1];\n  }\n\n  ngOnDestroy() {\n    this.appWS.client.close();\n  }\n\n}\n\nHolochainService.ɵfac = function HolochainService_Factory(t) {\n  return new (t || HolochainService)();\n};\n\nHolochainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HolochainService,\n  factory: HolochainService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/futorine/dev/holochain/holochain-engineers/team-mates/ui/src/app/services/holochain.service.ts"],"names":["environment","AppWebsocket","serializeHash","i0","ConnectionState","HolochainService","constructor","signalCallbacks","get_pub_key_from_cell","cell","installedcell","cellData","role_id","cell_id","undefined","getCellId","init","sessionStorage","clear","mock","console","log","appWS","connect","HOST_URL","s","signalHandler","appInfo","installed_app_id","APP_ID","cell_data","setItem","error","call","zome","fn_Name","payload","timeout","cellId","Error","callZome","cap_secret","zome_name","fn_name","provenance","signal","length","cb","cell_name","data","cb_fn","registerCallback","handler","push","getConnectionState","client","socket","readyState","ngOnDestroy","close","ɵfac","HolochainService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,IAAIC,eAAJ;;AACP,CAAC,UAAUA,eAAV,EAA2B;AACxBA,EAAAA,eAAe,CAACA,eAAe,CAAC,MAAD,CAAf,GAA0B,CAA3B,CAAf,GAA+C,MAA/C;AACAA,EAAAA,eAAe,CAACA,eAAe,CAAC,QAAD,CAAf,GAA4B,CAA7B,CAAf,GAAiD,QAAjD;AACAA,EAAAA,eAAe,CAACA,eAAe,CAAC,SAAD,CAAf,GAA6B,CAA9B,CAAf,GAAkD,SAAlD;AACAA,EAAAA,eAAe,CAACA,eAAe,CAAC,YAAD,CAAf,GAAgC,CAAjC,CAAf,GAAqD,YAArD;AACH,CALD,EAKGA,eAAe,KAAKA,eAAe,GAAG,EAAvB,CALlB,E,CAMA;;;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,GAAG;AACV,SAAKC,eAAL,GAAuB,EAAvB;AACH;;AACDC,EAAAA,qBAAqB,CAACC,IAAD,EAAO;AACxB,SAAK,IAAIC,aAAT,IAA0B,KAAKC,QAA/B,EAAyC;AACrC,UAAID,aAAa,CAACE,OAAd,IAAyBH,IAA7B,EACI,OAAOP,aAAa,CAACQ,aAAa,CAACG,OAAd,CAAsB,CAAtB,CAAD,CAApB;AACP;;AACD;AACA,WAAOC,SAAP;AACH;;AACDC,EAAAA,SAAS,CAACN,IAAD,EAAO;AACZ,SAAK,IAAIC,aAAT,IAA0B,KAAKC,QAA/B,EAAyC;AACrC,UAAID,aAAa,CAACE,OAAd,IAAyBH,IAA7B,EACI,OAAOC,aAAa,CAACG,OAArB;AACP;;AACD;AACA,WAAOC,SAAP;AACH;;AACKE,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACTC,MAAAA,cAAc,CAACC,KAAf;;AACA,UAAI,CAAClB,WAAW,CAACmB,IAAjB,EAAuB;AACnB,YAAI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,UAAA,KAAI,CAACC,KAAL,SAAmBrB,YAAY,CAACsB,OAAb,CAAqBvB,WAAW,CAACwB,QAAjC,EAA2C,IAA3C,EAAkDC,CAAD,IAAO,KAAI,CAACC,aAAL,CAAmBD,CAAnB,CAAxD,CAAnB;AACA,gBAAME,OAAO,SAAS,KAAI,CAACL,KAAL,CAAWK,OAAX,CAAmB;AAAEC,YAAAA,gBAAgB,EAAE5B,WAAW,CAAC6B;AAAhC,WAAnB,CAAtB;AACA,UAAA,KAAI,CAAClB,QAAL,GAAgBgB,OAAO,CAACG,SAAxB;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCM,OAAO,CAACG,SAA9C;AACAb,UAAAA,cAAc,CAACc,OAAf,CAAuB,QAAvB,EAAiC,WAAjC;AACH,SAPD,CAQA,OAAOC,KAAP,EAAc;AACVf,UAAAA,cAAc,CAACc,OAAf,CAAuB,QAAvB,EAAiC,MAAjC;AACAX,UAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd,EAFU,CAGV;AACH;AACJ,OAdD,MAeK;AACDZ,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH;AAnBQ;AAoBZ;;AACDY,EAAAA,IAAI,CAACxB,IAAD,EAAOyB,IAAP,EAAaC,OAAb,EAAsBC,OAAtB,EAA+BC,OAAO,GAAG,KAAzC,EAAgD;AAChD,UAAMC,MAAM,GAAG,KAAKvB,SAAL,CAAeN,IAAf,CAAf;AACA,QAAI,CAAC6B,MAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,oBAAoB9B,IAA9B,CAAN;AACJ,WAAO,KAAKa,KAAL,CAAWkB,QAAX,CAAoB;AACvBC,MAAAA,UAAU,EAAE,IADW;AAEvB5B,MAAAA,OAAO,EAAEyB,MAFc;AAGvBI,MAAAA,SAAS,EAAER,IAHY;AAIvBS,MAAAA,OAAO,EAAER,OAJc;AAKvBC,MAAAA,OAAO,EAAEA,OALc;AAMvBQ,MAAAA,UAAU,EAAEN,MAAM,CAAC,CAAD;AANK,KAApB,EAOJD,OAPI,CAAP;AAQH;AACD;;;AACAX,EAAAA,aAAa,CAACmB,MAAD,EAAS;AAClB,QAAI,KAAKtC,eAAL,CAAqBuC,MAArB,GAA8B,CAAlC,EAAqC;AACjC,WAAK,MAAMC,EAAX,IAAiB,KAAKxC,eAAtB,EAAuC;AACnCa,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB0B,EAAzB;;AACA,YAAIA,EAAE,CAACC,SAAH,IAAgBH,MAAM,CAACI,IAAP,CAAYb,OAAZ,CAAoB3B,IAApC,IAA4CsC,EAAE,CAACL,SAAH,IAAgBG,MAAM,CAACI,IAAP,CAAYb,OAAZ,CAAoBF,IAApF,EAA0F;AACtFd,UAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACA0B,UAAAA,EAAE,CAACG,KAAH,CAASL,MAAM,CAACI,IAAP,CAAYb,OAArB;AACA;AACH;AACJ;;AACDhB,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDwB,MAAvD;AACH;AACJ;;AACDM,EAAAA,gBAAgB,CAACH,SAAD,EAAYN,SAAZ,EAAuBU,OAAvB,EAAgC;AAC5C,SAAK7C,eAAL,CAAqB8C,IAArB,CAA0B;AAAEL,MAAAA,SAAS,EAAEA,SAAb;AAAwBN,MAAAA,SAAS,EAAEA,SAAnC;AAA8CQ,MAAAA,KAAK,EAAEE;AAArD,KAA1B;AACH,GAtEyB,CAuE1B;;;AACAE,EAAAA,kBAAkB,GAAG;AACjB,QAAI,KAAKhC,KAAT,EACI,OAAOlB,eAAe,CAAC,KAAKkB,KAAL,CAAWiC,MAAX,CAAkBC,MAAlB,CAAyBC,UAA1B,CAAtB,CADJ,KAGI,OAAOrD,eAAe,CAAC,CAAD,CAAtB;AACP;;AACDsD,EAAAA,WAAW,GAAG;AACV,SAAKpC,KAAL,CAAWiC,MAAX,CAAkBI,KAAlB;AACH;;AAhFyB;;AAkF9BtD,gBAAgB,CAACuD,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIzD,gBAAV,GAAP;AAAuC,CAAtG;;AACAA,gBAAgB,CAAC0D,KAAjB,GAAyB,aAAc5D,EAAE,CAAC6D,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5D,gBAAT;AAA2B6D,EAAAA,OAAO,EAAE7D,gBAAgB,CAACuD,IAArD;AAA2DO,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC","sourcesContent":["import { environment } from '@environment';\nimport { AppWebsocket } from '@holochain/client';\nimport { serializeHash } from \"../helpers/utils\";\nimport * as i0 from \"@angular/core\";\nexport var ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"OPEN\"] = 0] = \"OPEN\";\n    ConnectionState[ConnectionState[\"CLOSED\"] = 1] = \"CLOSED\";\n    ConnectionState[ConnectionState[\"CLOSING\"] = 2] = \"CLOSING\";\n    ConnectionState[ConnectionState[\"CONNECTING\"] = 3] = \"CONNECTING\";\n})(ConnectionState || (ConnectionState = {}));\n//tsconfig: \"allowSyntheticDefaultImports\": true,\nexport class HolochainService {\n    constructor() {\n        this.signalCallbacks = [];\n    }\n    get_pub_key_from_cell(cell) {\n        for (let installedcell of this.cellData) {\n            if (installedcell.role_id == cell)\n                return serializeHash(installedcell.cell_id[1]);\n        }\n        ;\n        return undefined;\n    }\n    getCellId(cell) {\n        for (let installedcell of this.cellData) {\n            if (installedcell.role_id == cell)\n                return installedcell.cell_id;\n        }\n        ;\n        return undefined;\n    }\n    async init() {\n        sessionStorage.clear();\n        if (!environment.mock) {\n            try {\n                console.log(\"Connecting to holochain\");\n                this.appWS = await AppWebsocket.connect(environment.HOST_URL, 1500, (s) => this.signalHandler(s));\n                const appInfo = await this.appWS.appInfo({ installed_app_id: environment.APP_ID });\n                this.cellData = appInfo.cell_data;\n                console.log(\"Connected to holochain\", appInfo.cell_data);\n                sessionStorage.setItem(\"status\", \"HOLOCHAIN\");\n            }\n            catch (error) {\n                sessionStorage.setItem(\"status\", \"mock\");\n                console.error(error);\n                //throw(error)\n            }\n        }\n        else {\n            console.log(\"you are in Mock mode.. no connections made!\");\n        }\n    }\n    call(cell, zome, fn_Name, payload, timeout = 15000) {\n        const cellId = this.getCellId(cell);\n        if (!cellId)\n            throw new Error(\"cell not found:\" + cell);\n        return this.appWS.callZome({\n            cap_secret: null,\n            cell_id: cellId,\n            zome_name: zome,\n            fn_name: fn_Name,\n            payload: payload,\n            provenance: cellId[1],\n        }, timeout);\n    }\n    /* in the future 'zome_name' and 'cell_name' should be meta-data of AppSignal and Not part of the payload*/\n    signalHandler(signal) {\n        if (this.signalCallbacks.length > 0) {\n            for (const cb of this.signalCallbacks) {\n                console.log(\"cb data: \", cb);\n                if (cb.cell_name == signal.data.payload.cell && cb.zome_name == signal.data.payload.zome) {\n                    console.log(\"signal callback found, executing cb function: \");\n                    cb.cb_fn(signal.data.payload);\n                    return;\n                }\n            }\n            console.log(\"Signal handler for signal was not found\", signal);\n        }\n    }\n    registerCallback(cell_name, zome_name, handler) {\n        this.signalCallbacks.push({ cell_name: cell_name, zome_name: zome_name, cb_fn: handler });\n    }\n    //TODO add event listener and relay state change back to UI\n    getConnectionState() {\n        if (this.appWS)\n            return ConnectionState[this.appWS.client.socket.readyState];\n        else\n            return ConnectionState[1];\n    }\n    ngOnDestroy() {\n        this.appWS.client.close();\n    }\n}\nHolochainService.ɵfac = function HolochainService_Factory(t) { return new (t || HolochainService)(); };\nHolochainService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HolochainService, factory: HolochainService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}