{"ast":null,"code":"import { Decoder } from \"./Decoder.mjs\";\nexport var defaultDecodeOptions = {};\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n\nexport function decode(buffer, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decode(buffer);\n}\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n\nexport function decodeMulti(buffer, options) {\n  if (options === void 0) {\n    options = defaultDecodeOptions;\n  }\n\n  var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeMulti(buffer);\n}","map":{"version":3,"sources":["/Users/futorine/dev/holochain/holochain-engineers/team-mates/node_modules/@msgpack/msgpack/dist.es5+esm/decode.mjs"],"names":["Decoder","defaultDecodeOptions","decode","buffer","options","decoder","extensionCodec","context","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","decodeMulti"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,OAAO,IAAIC,oBAAoB,GAAG,EAA3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,OAAxB,EAAiC;AACpC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGH,oBAAV;AAAiC;;AAC3D,MAAII,OAAO,GAAG,IAAIL,OAAJ,CAAYI,OAAO,CAACE,cAApB,EAAoCF,OAAO,CAACG,OAA5C,EAAqDH,OAAO,CAACI,YAA7D,EAA2EJ,OAAO,CAACK,YAAnF,EAAiGL,OAAO,CAACM,cAAzG,EAAyHN,OAAO,CAACO,YAAjI,EAA+IP,OAAO,CAACQ,YAAvJ,CAAd;AACA,SAAOP,OAAO,CAACH,MAAR,CAAeC,MAAf,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,WAAT,CAAqBV,MAArB,EAA6BC,OAA7B,EAAsC;AACzC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAGH,oBAAV;AAAiC;;AAC3D,MAAII,OAAO,GAAG,IAAIL,OAAJ,CAAYI,OAAO,CAACE,cAApB,EAAoCF,OAAO,CAACG,OAA5C,EAAqDH,OAAO,CAACI,YAA7D,EAA2EJ,OAAO,CAACK,YAAnF,EAAiGL,OAAO,CAACM,cAAzG,EAAyHN,OAAO,CAACO,YAAjI,EAA+IP,OAAO,CAACQ,YAAvJ,CAAd;AACA,SAAOP,OAAO,CAACQ,WAAR,CAAoBV,MAApB,CAAP;AACH","sourcesContent":["import { Decoder } from \"./Decoder.mjs\";\nexport var defaultDecodeOptions = {};\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode(buffer, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decode(buffer);\n}\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti(buffer, options) {\n    if (options === void 0) { options = defaultDecodeOptions; }\n    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeMulti(buffer);\n}\n"]},"metadata":{},"sourceType":"module"}