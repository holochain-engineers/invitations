{"ast":null,"code":"import _asyncToGenerator from \"/Users/futorine/dev/holochain/holochain-engineers/team-mates/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport fetch from \"cross-fetch\"; // This is coupled with https://github.com/holochain/launcher/blob/develop/src-tauri/src/uis/caddy.rs#L13\n\nexport const LAUNCHER_ENV_URL = \"/.launcher-env.json\";\n\nfunction fetchLauncherEnvironment() {\n  return _fetchLauncherEnvironment.apply(this, arguments);\n}\n\nfunction _fetchLauncherEnvironment() {\n  _fetchLauncherEnvironment = _asyncToGenerator(function* () {\n    const env = yield fetch(LAUNCHER_ENV_URL);\n\n    if (env.ok) {\n      const launcherEnvironment = yield env.json();\n      return launcherEnvironment;\n    } else {\n      // We are not in the launcher environment\n      if (env.status === 404) {\n        console.warn(\"[@holochain/conductor-api]: you are in a development environment. When this UI is run in the Holochain Launcher, `AppWebsocket.connect()`, `AdminWebsocket.connect()` and `appWebsocket.appInfo()` will have their parameters ignored and substituted by the ones provided by the Holochain Launcher.\");\n        return undefined;\n      } else {\n        throw new Error(`Error trying to fetch the launcher environment: ${env.statusText}`);\n      }\n    }\n  });\n  return _fetchLauncherEnvironment.apply(this, arguments);\n}\n\nconst isBrowser = typeof window !== \"undefined\";\nconst isJest = typeof process !== \"undefined\" && process.env && process.env.JEST_WORKER_ID !== undefined;\nlet promise;\n\nif (isBrowser && !isJest) {\n  promise = fetchLauncherEnvironment().catch(console.error);\n}\n\nexport function getLauncherEnvironment() {\n  return _getLauncherEnvironment.apply(this, arguments);\n}\n\nfunction _getLauncherEnvironment() {\n  _getLauncherEnvironment = _asyncToGenerator(function* () {\n    if (isBrowser) {\n      return promise;\n    } else {\n      return undefined;\n    }\n  });\n  return _getLauncherEnvironment.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/futorine/dev/holochain/holochain-engineers/team-mates/node_modules/@holochain/client/lib/environments/launcher.js"],"names":["fetch","LAUNCHER_ENV_URL","fetchLauncherEnvironment","env","ok","launcherEnvironment","json","status","console","warn","undefined","Error","statusText","isBrowser","window","isJest","process","JEST_WORKER_ID","promise","catch","error","getLauncherEnvironment"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,aAAlB,C,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,qBAAzB;;SACQC,wB;;;;;gDAAf,aAA0C;AACtC,UAAMC,GAAG,SAASH,KAAK,CAACC,gBAAD,CAAvB;;AACA,QAAIE,GAAG,CAACC,EAAR,EAAY;AACR,YAAMC,mBAAmB,SAASF,GAAG,CAACG,IAAJ,EAAlC;AACA,aAAOD,mBAAP;AACH,KAHD,MAIK;AACD;AACA,UAAIF,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACpBC,QAAAA,OAAO,CAACC,IAAR,CAAa,uSAAb;AACA,eAAOC,SAAP;AACH,OAHD,MAIK;AACD,cAAM,IAAIC,KAAJ,CAAW,mDAAkDR,GAAG,CAACS,UAAW,EAA5E,CAAN;AACH;AACJ;AACJ,G;;;;AACD,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,MAAMC,MAAM,GAAG,OAAOC,OAAP,KAAmB,WAAnB,IACXA,OAAO,CAACb,GADG,IAEXa,OAAO,CAACb,GAAR,CAAYc,cAAZ,KAA+BP,SAFnC;AAGA,IAAIQ,OAAJ;;AACA,IAAIL,SAAS,IAAI,CAACE,MAAlB,EAA0B;AACtBG,EAAAA,OAAO,GAAGhB,wBAAwB,GAAGiB,KAA3B,CAAiCX,OAAO,CAACY,KAAzC,CAAV;AACH;;AACD,gBAAsBC,sBAAtB;AAAA;AAAA;;;8CAAO,aAAwC;AAC3C,QAAIR,SAAJ,EAAe;AACX,aAAOK,OAAP;AACH,KAFD,MAGK;AACD,aAAOR,SAAP;AACH;AACJ,G","sourcesContent":["import fetch from \"cross-fetch\";\n// This is coupled with https://github.com/holochain/launcher/blob/develop/src-tauri/src/uis/caddy.rs#L13\nexport const LAUNCHER_ENV_URL = \"/.launcher-env.json\";\nasync function fetchLauncherEnvironment() {\n    const env = await fetch(LAUNCHER_ENV_URL);\n    if (env.ok) {\n        const launcherEnvironment = await env.json();\n        return launcherEnvironment;\n    }\n    else {\n        // We are not in the launcher environment\n        if (env.status === 404) {\n            console.warn(\"[@holochain/conductor-api]: you are in a development environment. When this UI is run in the Holochain Launcher, `AppWebsocket.connect()`, `AdminWebsocket.connect()` and `appWebsocket.appInfo()` will have their parameters ignored and substituted by the ones provided by the Holochain Launcher.\");\n            return undefined;\n        }\n        else {\n            throw new Error(`Error trying to fetch the launcher environment: ${env.statusText}`);\n        }\n    }\n}\nconst isBrowser = typeof window !== \"undefined\";\nconst isJest = typeof process !== \"undefined\" &&\n    process.env &&\n    process.env.JEST_WORKER_ID !== undefined;\nlet promise;\nif (isBrowser && !isJest) {\n    promise = fetchLauncherEnvironment().catch(console.error);\n}\nexport async function getLauncherEnvironment() {\n    if (isBrowser) {\n        return promise;\n    }\n    else {\n        return undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}